<?PHP

define('ORGANISATION_ROLE_VID',28);
define('PEOPLE_ROLE_VID',27);

define ('NODE_TYPE_PEOPLE', 'people');
define ('NODE_TYPE_FILM', 'film');
define ('NODE_TYPE_ORGANISATION', 'organisations');



/**
 * @file
 * This holds the specific functions for film_general website.
 */

function film_general_menu() {

  $items = array();
  $items['node/%node/people'] = array(
    'title' => 'People',
    'description' => 'Add people',
    'page callback' => 'film_general_add_page_callback',
    'page arguments' => array(NODE_TYPE_PEOPLE,1),
    'type' => MENU_CALLBACK,
    'access callback' => 'film_general_add_access_check',
    'access arguments' => array(1,NODE_TYPE_PEOPLE),      
  );  
  
  $items['node/%node/films'] = array(
    'title' => t('Films'),
    'description' => t('Add films'),
    'page callback' => 'film_general_add_page_callback',
    'page arguments' => array(NODE_TYPE_FILM,1),
    'type' => MENU_CALLBACK,
    'access callback' => 'film_general_add_access_check',
    'access arguments' => array(1,NODE_TYPE_FILM),
  );     
  
  $items['node/%node/organisations'] = array(
    'title' => t('Organisations'),
    'description' => t('Add Organisation'),
    'page callback' => 'film_general_add_page_callback',
    'page arguments' => array(NODE_TYPE_ORGANISATION,1),
    'type' => MENU_CALLBACK,
    'access callback' => 'film_general_add_access_check',
    'access arguments' => array(1,NODE_TYPE_ORGANISATION),
  );       

  // AJAX code
  $items['js/film_general/film_search'] = array(
    'page callback' => '_film_general_film_autocomplete',
    'access callback' => true , //array('access example autocomplete'),
    'type' => MENU_CALLBACK
  );

  $items['js/film_general/person_search'] = array(
    'page callback' => '_film_general_person_autocomplete',
    'access callback' => TRUE, //array('access example autocomplete'),
    'type' => MENU_CALLBACK
  ); 

  $items['js/film_general/organisation_search'] = array(
    'page callback' => '_film_general_organisation_autocomplete',
    'access callback' => TRUE, //array('access example autocomplete'),
    'type' => MENU_CALLBACK
  );   
  
  $items['js/film_general/organisation_role'] = array(
    'page callback' => '_film_general_organisation_role_autocomplete',
    'access callback' => TRUE, //array('access example autocomplete'),
    'type' => MENU_CALLBACK
  );   
    
  return $items;
}

  function film_general_js() {
    return array(
      'film_search' => array(
        'callback'     => '_film_general_film_autocomplete',
//        'includes'     => array('theme', 'unicode'),
//        'dependencies' => array('locale', 'filter', 'node'),
        'bootstrap'    => DRUPAL_BOOTSTRAP_CONSTANT,
//        'file'         => 'film_general.module',
//        'access arguments' => array('permission'),
//        'access callback'  => 'callback function',
 //       'page arguments'  => array()
      ),
      'person_search' => array(
        'callback'     => '_film_general_person_autocomplete',
        'bootstrap'    => DRUPAL_BOOTSTRAP_CONSTANT,
      ), 
      'organisation_search' => array(
        'callback'     => '_film_general_organisation_autocomplete',
        'bootstrap'    => DRUPAL_BOOTSTRAP_CONSTANT,
      ),   
      'organisation_role' => array(
        'callback'     => '_film_general_organisation_role_autocomplete',
        'bootstrap'    => DRUPAL_BOOTSTRAP_CONSTANT,
//        'bootstrap'    => array(DRUPAL_BOOTSTRAP_CONSTANT,DRUPAL_BOOTSTRAP_VARIABLES),
      ),         
    );
  }
    
function film_general_form_alter(&$form, $form_state, $form_id) {
  //watchdog('film_general_form_alter','Form ID: %form_id', array('%form_id' => $form_id));
  // we need to select the forms we want to alter

//$var['field_film_link'][LANGUAGE_NONE][0]['target_id']['#default_value']
  switch ($form_id) {
    case 'review_node_form':
      if (!empty($_GET['nid'])) {
        $node = node_load($_GET['nid']);
        $form['field_link'][LANGUAGE_NONE][0]['target_id']['#default_value'] = 
            $node->title . ' (' . $node->nid . ')';
      }
      array_unshift($form['#validate'], 'film_general_review_node_validate');      
      $form['actions']['submit']['#submit'][] = 'film_general_review_node_submit';

      break;
      
    case 'image_node_form':

      if (!empty($_GET['nid'])) {
        $node = node_load($_GET['nid']);
        $form['field_link'][LANGUAGE_NONE][0]['target_id']['#default_value'] = 
            $node->title . ' (' . $node->nid . ')';
      }
      array_unshift($form['#validate'], 'film_general_image_node_validate');      
      $form['actions']['submit']['#submit'][] = 'film_general_image_node_submit';

      break;
      
    case 'article_node_form':
      if (!empty($_GET['nid'])) {
        $node = node_load($_GET['nid']);
        $form['field_link'][LANGUAGE_NONE][0]['target_id']['#default_value'] = 
            $node->title . ' (' . $node->nid . ')';
      }
      array_unshift($form['#validate'], 'film_general_article_node_validate');      
      $form['actions']['submit']['#submit'][] = 'film_general_article_node_submit';

      break;      
    case 'people_node_form':
//      dpm($form);
//      dpm($form_state);
      $film_node_id = '';
      $type = '';
      $person_name = '';
      
      $form['title']['#default_value'] = 'Unknown';
      if (!empty($_SESSION['create_person'])) {
        if (!empty($_SESSION['create_person']['person_name']))
          $person_name = $_SESSION['create_person']['person_name'];
        
        if (!empty($_SESSION['create_person']['film_node_id']))
          $film_node_id = $_SESSION['create_person']['film_node_id'];
        
        if (!empty($_SESSION['create_person']['role_id']))
          $role_id =  $_SESSION['create_person']['role_id'];

        if (!empty($_SESSION['create_person']['sub_role_id']))
          $sub_role_id =  $_SESSION['create_person']['sub_role_id'];

        if (!empty($_SESSION['create_person']['sub_role_id']))
          $character =  $_SESSION['create_person']['character'];

        unset($_SESSION['create_person']);
        
        $parts = explode(' ',$person_name,2);

        if (!empty($parts[0]))
          $form['field_forename'][LANGUAGE_NONE][0]['value']['#default_value'] = $parts[0];
        
        if (!empty($parts[1]))
          $form['field_surname'][LANGUAGE_NONE][0]['value']['#default_value'] = $parts[1];
      } else {
        if (!empty($form_state['input']['film_id']))
          $film_node_id = $form_state['input']['film_id'];
        else
          $film_node_id = '';
        
        if (!empty($form_state['input']['role_id']))
            $role_id = $form_state['input']['role_id'];
        else
          $role_id = '';
        
        if (!empty($form_state['input']['sub_role_id']))
            $sub_role_id = $form_state['input']['sub_role_id'];
        else
          $sub_role_id = '';
        
        if (!empty($form_state['input']['character']))
            $character= $form_state['input']['character'];
        else
          $character = '';          
      }
      
      $form['film_id'] = array(
        '#type' => 'hidden',
        '#value' => $film_node_id,  
      );

      $form['role_id'] = array(
        '#type' => 'hidden',
        '#value' => $role_id,  
      );

      $form['sub_role_id'] = array(
        '#type' => 'hidden',
        '#value' => $sub_role_id,  
      );

      $form['character'] = array(
        '#type' => 'hidden',
        '#value' => $character,  
      );

      array_unshift($form['#validate'], 'film_general_person_node_validate');
      $form['actions']['submit']['#submit'][] = 'film_general_person_node_submit';

      break;
    
	case 'film_node_form':
//            $_SESSION['new_film_data'] = array(
//          'person_node_id' => $form_state['values']['person_node_id'],
//          'film_name' => $form_state['values'][NODE_TYPE_FILM],
//          'type' => $form_state['values']['type'],
    if (!empty($_SESSION['new_film_data'])) {
      //dpm($_SESSION['new_film_data']);
      if (!empty($_SESSION['new_film_data']['title'])) {
        $form['title']['#default_value'] = $_SESSION['new_film_data']['title'];
      }
      
      if (!empty($_SESSION['new_film_data']['year'])) {
        $language = $form['field_year']['#language'];
        $form['field_year'][$language][0]['value']['#default_value'] =
           $_SESSION['new_film_data']['year'];
      }  
      
      if (!empty($_SESSION['new_film_data']['person_node_id'])) {
        $form['person_node_id'] = array(
            '#type' => 'hidden',
            '#value' => $_SESSION['new_film_data']['person_node_id'],
        );
      }
      
      if (!empty($_SESSION['new_film_data']['type'])) {
        $form['person_type'] = array(
            '#type' => 'hidden',
            '#value' => $_SESSION['new_film_data']['type'],
        );
      }
    
      // Once we have used the data we need to clear it so we don't use it again
      $_SESSION['new_film_data'] = '';
    }

//    $form['field_int_ref'][LANGUAGE_NONE][0]['value']['#default_value'] = time();
    // Now we add in a submit routine so we can record the date the item 
    // is goign to be published and unpublished
   
    $form['actions']['submit']['#submit'][] = 'film_general_film_submit';
   // $form['#redirect'] = 'search-people'; 
	  break; 
  }
}

function film_general_film_submit($form, &$form_state) {

//  $_SESSION['new_film'] = array(
//      'nid' => -1,
//      'title' => $form_state['values']['title'],
//      'year' => $form_state['values']['field_year']['und'][0]['value'],
//  );
  $form_state['complete form']['redirect'] = 'search-tips';
  if(!empty($form_state['values']['person_node_id']))  {
    $_SESSION['new_film'] = array(
        'person_type' => $form_state['values']['person_type'],
        'person_node_id' => $form_state['values']['person_node_id'],
        'title' => $form_state['values']['title'],
//        'int_ref' => $form_state['values']['field_int_ref'][LANGUAGE_NONE][0]['value'],
    );    
    $form_state['redirect'] = 'node/'.$form_state['values']['person_node_id'].'/films';
  }

}


function film_general_add_access_check($node = NULL,$calling_type = NULL) {
  switch ($calling_type) {
    case NODE_TYPE_FILM :
      if ($node->type == NODE_TYPE_PEOPLE || $node->type == NODE_TYPE_ORGANISATION) {
        return true;
      } else {
        return false;
      }
      break;
    case NODE_TYPE_PEOPLE :
      if ($node->type == NODE_TYPE_FILM || $node->type == NODE_TYPE_ORGANISATION) {
        return true;
      } else {
        return false;
      }      
      break;
    case NODE_TYPE_ORGANISATION :
      if ($node->type == NODE_TYPE_PEOPLE || $node->type == NODE_TYPE_FILM) {
        return true;
      } else {
        return false;
      }      
      break;
      default:
        return false;
  }
  return false;
}


//function film_general_add_33_page_callback($node) {
//
//  
//    $output = array();
//    return film_general_manage_people_on_film($node->nid);
//}
//
//function film_general_add_film_page_callback($node) {
//    return film_general_manage_people_for_films($node->nid);
//}

// The $type is the content type we are adding to the node
// So this chould be person or film or orgsanisaton. It shouldn't 
// be the same type as the node
function film_general_add_page_callback($type, $node = NULL) {

  if (!empty($type) && !empty($node) && ($type == NODE_TYPE_FILM
      || $type == NODE_TYPE_PEOPLE || $type == NODE_TYPE_ORGANISATION)) {
     return film_general_manage_add($node,$type);
  } else {
    return;
  }
}



function film_general_people_form($form, &$form_state, $node, $destination = NULL) {
  global $user;
  $form = array();

  $language = $node->language;

  $form['field_node_nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $form['field_node_vid'] = array(
    '#type' => 'hidden',
    '#value' => $node->vid,
  );

  $form['action']['add_director'] = array(
	'#type' => 'submit',
	'#value' => t('Add director'),
//	'#validate' => array('_split_children_validate'),
//	'#submit' => array('_split_children_submit'),
  );
  
  $form['action']['add_cast'] = array(
	'#type' => 'submit',
	'#value' => t('Add cast'),
//	'#validate' => array('_split_children_validate'),
//	'#submit' => array('_split_children_submit'),
  );  
  return $form;
}

function film_general_list_links($form, &$form_state, $node, $type = NULL,$destination = NULL) {
  global $user;
  $form = array();
  // If we are lookng at organisations then we need to display the results differently.
  if ($node->type == NODE_TYPE_ORGANISATION || $type == NODE_TYPE_ORGANISATION) {

    $output = film_links_get_links($node,NULL,NULL,array('show_role' => TRUE,'show_edit' => TRUE, 'type' => array($node->type,$type)));

    if (!empty($output) && $output['table']['#markup'] != '<div></div>') {
      $form['organisation_links'] = array(
          '#markup' => '<div class="organisation"><h3></h3>' . drupal_render($output) . '</div>',
      );
    }    
  } else {
    $role = _film_general_convert_role(array("Actor"),$type);

    $output = film_links_get_links($node,NULL,$role,array('show_role' => TRUE,'show_edit' => TRUE, 'type' => array($node->type,$type)));


    if (!empty($output) && $output['table']['#markup'] != '<div></div>') {
      $form['film_links'] = array(
          '#markup' => '<div class="crew"><h3>Crew</h3>' . drupal_render($output) . '</div>',
      );
    }

     $output = film_links_get_links($node,$role,NULL,array('show_role' => FALSE,'show_edit' => TRUE, 'type' => array($node->type,$type)));

    // Need to check if we can add a delete button here.

    if (!empty($output) && $output['table']['#markup'] != '<div></div>') {
      $form['film_links_actors'] = array(
          '#markup' => '<div class="cast"><h3>Cast</h3>' . drupal_render($output) . '</div>',
      );    
    }    
  }


  return $form;
}

// ** SB ** To be removed
function film_general_film_people_form($form, &$form_state, $node, $destination = NULL) {
  global $user;
  $form = array();
  $role = _film_general_convert_role(array("Actor"));
  $output = film_links_get_links($node,NULL,$role,array('show_role' => TRUE));

  if (!empty($output) && $output['table']['#markup'] != '<div></div>') {
    $form['film_links'] = array(
        '#markup' => '<div class="crew"><h3>Crew</h3>' . drupal_render($output) . '</div>',
    );
  }

  $output = film_links_get_links($node,$role,NULL,array('show_role' => FALSE));
  // Need to check if we can add a delete button here.

  if (!empty($output) && $output['table']['#markup'] != '<div></div>') {
    $form['film_links_actors'] = array(
        '#markup' => '<div class="cast"><h3>Cast</h3>' . drupal_render($output) . '</div>',
    );    
  }

  return $form;
}
// ** SB ** To be removed
function film_general_people_film_form($form, &$form_state, $node, $destination = NULL) {
  //global $user;

  $form = array();
  $role = _film_general_convert_role(array("Actor"));
  $output = film_links_get_links($node,NULL,$role,array('show_role' => TRUE));
  // Need to check if we can add a delete button here.

  if (!empty($output) && $output['table']['#markup'] != '<div></div>') {
    $form['film_links'] = array(
      '#markup' => '<div class="crew"><h3>Crew</h3>' . drupal_render($output) . '</div>',
    );
  }
  
  $output = film_links_get_links($node,$role,NULL,array('show_role' => FALSE));
  // Need to check if we can add a delete button here.

  if (!empty($output) && $output['table']['#markup'] != '<div></div>') {
    $form['film_links_actors'] = array(
        '#markup' => '<div class="cast"><h3>Cast</h3>' . drupal_render($output) . '</div>',
    );  
  }

  return $form;
}

function film_general_get_films_for_role($person_node_id, $field) {
  //dpm($field);
  $select = db_select('node','n');
  $select->fields('n', array('nid','title'));
  $select->join('field_data_'.$field,'f','n.nid = f.entity_id');
  $select->condition('f.bundle', NODE_TYPE_FILM,'=');
  $select->condition('f.'.$field.'_target_id',$person_node_id,'=');

  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $entries;
}

function film_general_film_people_form_submit($form, &$form_state) {

//  switch($form_state['clicked_button']['#value']) {
//    case 'Remove':
//      $parts = explode('-',$form_state['clicked_button']['#name']);
//
//      $node_film = node_load($parts[4]);
//      $field = 'field_'.$parts[1];
//
//      $item = &$node_film->$field;
//      foreach($item[LANGUAGE_NONE] as $key => $value) {
//        if ($value['target_id'] == $parts[3]) {
//          dpm('Found item to delete');
//          unset($item[LANGUAGE_NONE][$key]);
//          break;
//        }
//      }
//
//      node_save($node_film);
//      break;
//    case 'Edit':
//      $parts = explode('-',$form_state['clicked_button']['#name']);
//      drupal_goto('node/'.$parts[3].'/edit');
//      break;
//  }
}

function film_general_people_film_form_submit($form, &$form_state) {

  switch($form_state['clicked_button']['#value']) {
    case 'Remove':
      $parts = explode('-',$form_state['clicked_button']['#name']);

      $node_film = node_load($parts[3]);
      $field = 'field_'.$parts[1];

      $item = &$node_film->$field;
      foreach($item[LANGUAGE_NONE] as $key => $value) {
        if ($value['target_id'] == $parts[4]) {
          dpm('Found item to delete');
          unset($item[LANGUAGE_NONE][$key]);
          break;
        }
      }

      node_save($node_film);
      break;
    case 'Edit':
      $parts = explode('-',$form_state['clicked_button']['#name']);
      drupal_goto('node/'.$parts[3].'/edit');
      break;
  }
}

function film_general_film_search_form() {
  $form = array();
 
  $form['films'] = array(
    '#title' => t('Search films'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'js/film_general/film_search', // ** SB **
   );
 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search for film',
//	'#validate' => array('_split_children_validate'),
	'#submit' => array('film_general_film_search_submit'),   
  );
 
  return $form;
}

function film_general_person_search_form() {
  $form = array();
 
  $form['person'] = array(
    '#title' => t('Search people'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'js/film_general/person_search',
   );
 
  
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search for a person',
    '#submit' => array('film_general_person_search_submit'),   
  );
 
  return $form;
}


function film_general_add_form_people($form, &$form_state,$node = NULL, $destination = NULL) {

  $form = array();
  
  $message = 'Please enter the person you wish to add to this film.';
  $message .= 'If the person is not already in our system we will ask you to fill in their details when you have completed this form.';
  $form['instructions'] = array(
      '#markup' => t($message),
      ); 
  
  $form['person'] = array(
   '#title' => t('Find person'),
   '#type' => 'textfield',
   '#required' => TRUE,      
   '#autocomplete_path' => 'js/film_general/person_search',
  );
  
  if ($node->type == NODE_TYPE_ORGANISATION) {
    $role_autocompelte = 'js/film_general/organisation_role';
  } else {
    $role_autocompelte = 'js/film_links/role_search';    
  }
  $form['role'] = array(
      '#title' => t('Role'),
      '#type' => 'textfield',
      '#required' => TRUE, 
      '#autocomplete_path' => $role_autocompelte ,
  );
  

  $form['character'] = array(
      '#title' => t('Character'),
      '#type' => 'textfield',
      '#size' => 60,
      '#maxlength' => 255,
  );

 
  $form['node_id'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  
  $form['role_type'] = array(
    '#type' => 'hidden',
    '#value' => $node->type, //NODE_TYPE_PEOPLE,
  );  

  if (!empty($form_state['input']['person_node_id']))
    $person_node_id = $form_state['input']['person_node_id'];
  else 
    $person_node_id = '';
  
  $form['person_node_id'] = array(
    '#type' => 'hidden',
    '#value' => $person_node_id,
  );
  
  $form['action']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add person to ' . $node->type,
//	'#validate' => array('_split_children_validate'),
	  '#submit' => array('film_general_add_form_people_submit'),   
  );
  
  return $form;
}

function film_general_add_form_film($form, &$form_state,$node = NULL, $destination = NULL) {
  $form = array();

  $message =  'Please enter the film you wish to add for this person. If the film is not already in our system we will ask you to fill in the details when you have completed this form.';
  

  $form['instructions'] = array(
    '#markup' => t($message),
    ); 
  
  $form[NODE_TYPE_FILM] = array(
    '#title' => t('Find film'),
    '#type' => 'textfield',
    '#required' => TRUE, 
    '#autocomplete_path' => 'js/film_general/film_search',
   );
  
  if ($node->type == NODE_TYPE_ORGANISATION) {
    $role_autocompelte = 'js/film_general/organisation_role';
  } else {
    $role_autocompelte = 'js/film_links/role_search';    
  }
  
  $form['role'] = array(
      '#title' => t('Role'),
      '#type' => 'textfield',
      '#required' => TRUE, 
      '#autocomplete_path' => $role_autocompelte ,
  );
  
  $form['character'] = array(
      '#title' => t('Character'),
      '#type' => 'textfield',
      '#size' => 60,
      '#maxlength' => 255,
  );
 
  $form['node_id'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  if (!empty($form_state['input']['film_node_id']))
    $film_node_id = $form_state['input']['film_node_id'];
  else
    $film_node_id = '';
  
  $form['film_node_id'] = array(
    '#type' => 'hidden',
    '#value' => $film_node_id,
  );
  
  $form['role_type'] = array(
    '#type' => 'hidden',
    '#value' => $node->type,// NODE_TYPE_FILM,
  );   
  
  $form['action']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add ' . $node->type . ' to film',
//	'#validate' => array('_split_children_validate'),
   	'#submit' => array('film_general_add_form_film_submit'),   
  );

  return $form;
}

function film_general_add_form_organisation($form, &$form_state,$node = NULL, $destination = NULL) {
  $form = array();

  $message =  'Please enter the organisation you wish to add for this ' . $node->type . '.';
  

  $form['instructions'] = array(
    '#markup' => t($message),
    ); 
  
  $form[NODE_TYPE_ORGANISATION] = array(
    '#title' => t('Organisation'),
    '#type' => 'textfield',
    '#required' => TRUE, 
    '#autocomplete_path' => 'js/film_general/organisation_search',
   );
  
  $form['role'] = array(
      '#title' => t('Role'),
      '#type' => 'textfield',
      '#required' => TRUE, 
      '#autocomplete_path' => 'js/film_general/organisation_role',
  );

 
  $form['node_id'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  if (!empty($form_state['input']['organisation_node_id']))
    $org_node_id = $form_state['input']['organisation_node_id'];
  else
    $org_node_id = '';

  $form['organisation_node_id'] = array(
    '#type' => 'hidden',
    '#value' => $org_node_id,
  );
  
  $form['role_type'] = array(
    '#type' => 'hidden',
    '#value' => $node->type, //NODE_TYPE_ORGANISATION,
  );   
  $form['action']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add organisation to ' . $node->type,
//	'#validate' => array('_split_children_validate'),
   	'#submit' => array('film_general_add_form_organisation_submit'),   
  );

  return $form;
}
//--------------------------------------------------------------------------------------
// ** SB ** need to remove this 
//function film_general_add_person_to_film_form($form, &$form_state,$node_id = NULL, $destination = NULL) {
//
//  $form = array();
//  
//  $form['person'] = array(
//   '#title' => t('Find person'),
//   '#type' => 'textfield',
//   '#required' => TRUE,      
//   '#autocomplete_path' => 'js/film_general/person_search',
//  );
//  
//  $form['role'] = array(
//      '#title' => t('Role'),
//      '#type' => 'textfield',
//      '#required' => TRUE,
//      '#autocomplete_path' => 'js/film_links/role_search',
//  );
//
//  $form['character'] = array(
//      '#title' => t('Character'),
//      '#type' => 'textfield',
//      '#size' => 60,
//      '#maxlength' => 255,
//  );
//
// 
//  $form['node_id'] = array(
//    '#type' => 'hidden',
//    '#value' => $node_id,
//  );
//  
//  $form['action']['submit'] = array(
//    '#type' => 'submit',
//    '#value' => 'Add person to film',
////	'#validate' => array('_split_children_validate'),
//	  '#submit' => array('film_general_person_to_film_search_submit'),   
//  );
//  
////  $form['action']['cancel'] = array(
////    '#type' => 'submit',
////    '#attributes' => array('id' => array('cancel')),
////    '#value' => 'Finish',
//////	'#validate' => array('_split_children_validate'),
////	'#submit' => array('film_general_person_to_film_search_submit'),   
////  );  
//
//  drupal_add_js(drupal_get_path('module', 'film_general') . '/js/general.js', 'file');
//  return $form;
//}

// This form allows the user to select the role the person played in the film
//  and the film itself.
// node_id - is the ID of the person we are adding the film to.

// ** SB ** Need to remove this
//function film_general_add_film_to_person_form($form, &$form_state,$node_id = NULL, $destination = NULL) {
//  $form = array();
//  
//  
//  $form[NODE_TYPE_FILM] = array(
//    '#title' => t('Find film'),
//    '#type' => 'textfield',
//    '#required' => TRUE, 
//    '#autocomplete_path' => 'js/film_general/film_search',
//   );
//  
//  $form['role'] = array(
//      '#title' => t('Role'),
//      '#type' => 'textfield',
//      '#required' => TRUE, 
//      '#autocomplete_path' => 'js/film_links/role_search',
//  );
//  // Need to load the current option list depending on the role specified
//
////  if (!empty($form_state['input']['role'])) {
////    $roles = _film_link_get_subroles($form_state['input']['role']);
////    dpm($roles);
////    $options['_none'] = '--';
////    if (!empty($roles)) {
////      foreach($roles as $key => $value) {
////        $options[$key] = $value;
////      }
////    }
////  } else {
////    $options = array(
////       '_none' => t('Select a role first')
////    );
////  }
//  
////  $form['subrole'] = array(
////      '#title' => t('Sub Role'),
////      '#type' => 'select',
////      '#options' => $options,  
////  );
//
//  $form['character'] = array(
//      '#title' => t('Character'),
//      '#type' => 'textfield',
//      '#size' => 60,
//      '#maxlength' => 255,
//  );
// 
//  $form['person_node_id'] = array(
//    '#type' => 'hidden',
//    '#value' => $node_id,
//  );
//
//  if (!empty($form_state['input']['film_node_id']))
//    $film_node_id = $form_state['input']['film_node_id'];
//  else
//    $film_node_id = '';
//  
//  $form['film_node_id'] = array(
//    '#type' => 'hidden',
//    '#value' => $film_node_id,
//  );
//  
//  $form['action']['submit'] = array(
//    '#type' => 'submit',
//    '#value' => 'Add person to film',
////	'#validate' => array('_split_children_validate'),
//   	'#submit' => array('film_general_film_to_person_search_submit'),   
//  );
//  
////  $form['action']['cancel'] = array(
////    '#type' => 'submit',
////    '#attributes' => array('id' => array('cancel')),
////    '#value' => 'Finish',
//////	'#validate' => array('_split_children_validate'),
////  	'#submit' => array('film_general_film_to_person_search_submit'),   
////  );  
//
//  return $form;
//}


function film_general_film_search_submit($form, &$form_state) {

  // Need to split the film and search for it again to see if it already exists
  // if it does then we need to display it

  $matches = array();

  if (!empty($form_state['values']['films'])) {
    $title = '';
    $year = '';
    preg_match('/\([0-9]{4}\)$/m',$form_state['values']['films'],$matches);
    if ($matches) {
      $year = substr($matches[0],1,4);
      // Now get the title of the film.
      // As we have the year we can find the title just by removing the year
      $title = trim(substr($form_state['values']['films'],0,-6));

      // Now locate the film
      $query = db_select('node', 'n');

      // Select rows that match the string

      $query->fields('n', array('nid'));
      $query->join('field_data_field_year','y','y.entity_id=n.nid');
      $query->condition('n.type',NODE_TYPE_FILM,'=');
      $query->condition('n.title', $title, '=');
      $query->condition('y.field_year_value',$year,'=');
      $query->range(0, 1);

      $return = $query->execute(); 
      $node_id = '';
      foreach ($return as $row) {
        $node_id = $row->nid;
      }
      
    } else { 
      // No year can be found, so it must be the whole title
      // Now get the node id of hte film and display it
      $title = trim($form_state['values']['films']);
      
      // Now locate the film
      $query = db_select('node', 'n');

      // Select rows that match the string

      $query->fields('n', array('nid'));
      $query->condition('n.type',NODE_TYPE_FILM,'=');
      $query->condition('n.title', $title, '=');
      $query->range(0, 1);

      $return = $query->execute(); 
      $node_id = '';
      foreach ($return as $row) {
        $node_id = $row->nid;
      }      
    }
    
    if (!empty($node_id)) {
      // WE have located the film they are searching on
      $form_state['redirect'] = 'node/' . $node_id;
      //drupal_goto('node/'.$node_id);
    } else {
      $data = array('title' => $title, 'year' => $year);
      $_SESSION['new_film_data'] = $data;
      drupal_set_message(t('The film requested is not in our system. Would you like to add it now.'),'warning');
      $form_state['redirect'] = 'node/add/film';
      //drupal_goto('node/add/film');
    }    
  }
}
function film_general_person_search_submit($form, &$form_state) {

  // Need to split the film and search for it again to see if it already exists
  // if it does then we need to display it

  $matches = array();

  if (!empty($form_state['values']['person'])) {
//    $title = '';
//    $year = '';
    preg_match('/\([0-9]+\)$/m',$form_state['values']['person'],$matches);
    if ($matches) {
      $node_id = substr($matches[0],1,strlen($matches[0])-2);
    } else { 
//      // No year can be found, so it must be the whole title
//      // Now get the node id of hte film and display it
//      $title = trim($form_state['values']['films']);
//      
//      // Now locate the film
//      $query = db_select('node', 'n');
//
//      // Select rows that match the string
//
//      $query->fields('n', array('nid'));
//      $query->condition('n.type',NODE_TYPE_FILM,'=');
//      $query->condition('n.title', $title, '=');
//      $query->range(0, 1);
//
//      $return = $query->execute(); 
//      $node_id = '';
//      foreach ($return as $row) {
//        $node_id = $row->nid;
//      }      
    }
//    
    if (!empty($node_id)) {
      // WE have located the person they are searching on
      $form_state['redirect'] = 'node/' . $node_id;
    } else {
        $_SESSION['create_person'] = array(
            'person_name' => $form_state['values']['person'],
        );

      drupal_set_message(t('The person requested is not in our system. Would you like to add them now.'),'warning');
      $form_state['redirect'] = 'node/add/people';
    }    
  }
}

//function film_general_person_to_film_search_submit($form, &$form_state) {
function film_general_add_form_people_submit($form, &$form_state) {

  // Need to split the film and search for it again to see if it already exists
  // if it does then we need to display it

  $matches = array();

  if ($form_state['clicked_button']['#id'] == 'edit-cancel') {
    $node_id = $form_state['values']['node_id'];
    $_SESSION['film_node_id'] = '';
    drupal_goto('node/'.$node_id);
  } else {
    if (!empty($form_state['values']['person'])) {
      if (!empty($form_state['values']['person_node_id']) && $form_state['values']['person_node_id'] > 0) {
        $person_node_id = $form_state['values']['person_node_id'];
        $node_id = $form_state['values']['node_id'];
        $role = $form_state['values']['role'];
        $character = $form_state['values']['character'];
        $role_details = film_links_get_role_details(NULL,NODE_TYPE_PEOPLE,$role);
        dpm($role_details);
        if (empty($role_details['rid'])) {
          $rid = film_links_role_save($role,NODE_TYPE_PEOPLE,0);
        } else {
          $rid = $role_details['rid'];
        }  
        _film_general_save_role($node_id,$person_node_id,$rid,$character);

      } else {
        // we need to create a new node here and then save the id as the person.
        global $user;
        $film_node_id = $form_state['values']['node_id'];
        $person_name = $form_state['values']['person'];
        $role = $form_state['values']['role'];
        $character = $form_state['values']['character'];
        
        $node = new stdClass();
        $node->type = NODE_TYPE_PEOPLE;
        $node->title = $person_name;
        node_object_prepare($node); 
        $node->language = LANGUAGE_NONE;
        $node->uid = $user->uid;
        $parts = explode(' ',$person_name,2);

        $node->field_forename[$node->language][0]['value'] = $parts[0];
        $node->field_surname[$node->language][0]['value'] = $parts[1];

        $node = node_submit($node);
        node_save($node);
        
        $person_node_id = $node->nid;
        $role_details = film_links_get_role_details(NULL,NODE_TYPE_PEOPLE,$role);
        if (empty($role_details['rid'])) {
          $rid = film_links_role_save($role,NODE_TYPE_PEOPLE);
        } else {
          $rid = $role_details['rid'];
        }          
        _film_general_save_role($film_node_id,$person_node_id,$rid,$character);
      }    
    }
  }
}

//function film_general_film_to_person_search_submit($form, &$form_state) {
function film_general_add_form_film_submit($form, &$form_state) {

  // Need to split the film and search for it again to see if it already exists
  // if it does then we need to display it
//dpm($form_state);
  $matches = array();

  if ($form_state['clicked_button']['#id'] == 'edit-cancel') {
    $node_id = $form_state['values']['node_id'];
    drupal_goto('node/'.$node_id);
  } else {
    if (!empty($form_state['values']['node_id']) && !empty($form_state['values']['film_node_id'])) {
      $film_node_id = $form_state['values']['film_node_id'];
      $person_node_id = $form_state['values']['node_id'];
      $role = $form_state['values']['role'];
//      $sub_role_id = $form_state['values']['subrole'];
      $character = $form_state['values']['character'];
//      $new_sub_role = $form_state['values']['new_subrole'];
        $role_details = film_links_get_role_details(NULL,NODE_TYPE_FILM,$role);
        if (empty($role_details['rid'])) {
          $rid = film_links_role_save($role,NODE_TYPE_FILM);
        } else {
          $rid = $role_details['rid'];
        }  
      _film_general_save_role($film_node_id,$person_node_id,$rid,$character);
 
    } else {
      // Need to create a new film to add to this person   *** SB ***
      // Use the following to transfer data to the new film page
      // Need to create a new node for the film
      $film_node_id = $form_state['values']['film_node_id'];
      $person_node_id = $form_state['values']['node_id'];   
      $role = $form_state['values']['role'];
      $character = $form_state['values']['character'];  
      
      $node = new stdClass();
      $node->type = NODE_TYPE_FILM;
      $node->language = LANGUAGE_NONE;
      node_object_prepare($node);
      $node->title = $form_state['values'][NODE_TYPE_FILM];
      unset($node->field_production_status[$node->language][0]['tid']);// = NULL;
      unset($node->field_colour[$node->language][0]['value']);// = NULL;      
      node_save($node);

      $film_node_id = $node->nid;
        $role_details = film_links_get_role_details(NULL,NODE_TYPE_FILM,$role);
          if (empty($role_details['rid'])) {
          $rid = film_links_role_save($role,NODE_TYPE_FILM);
        } else {
          $rid = $role_details['rid'];
        }
      _film_general_save_role($film_node_id,$person_node_id,$rid,$character);      
    }    
  }
}


function film_general_add_form_organisation_submit($form, &$form_state) {

  // Need to split the film and search for it again to see if it already exists
  // if it does then we need to display it

  $matches = array();

  if ($form_state['clicked_button']['#id'] == 'edit-cancel') {
    $node_id = $form_state['values']['node_id'];
    drupal_goto('node/'.$node_id);
  } else {
    // check to see if the calling node has been populated and the organisation 
    // has also been selected from an exisitng organisation
    if (!empty($form_state['values']['node_id']) && !empty($form_state['values']['organisation_node_id'])) {
      $organisation_node_id = $form_state['values']['organisation_node_id'];
      $node_id = $form_state['values']['node_id'];
      $role = $form_state['values']['role'];

      // Will need to change this so we record the role as an oranisation role
        $role_details = film_links_get_role_details(NULL,NODE_TYPE_ORGANISATION,$role);
        if (empty($role_details['rid'])) {
          $rid = film_links_role_save($role,NODE_TYPE_ORGANISATION);
        } else {
          $rid = $role_details['rid'];
        }
      _film_general_save_role($organisation_node_id,$node_id,$role_details['rid'],NULL);

    } else {
      // Need to create a new organisation 
      // Use the following to transfer data to the new film page
      // Need to create a new node for the film
      $node_id = $form_state['values']['node_id'];
      $organisation_node_id = $form_state['values']['organisation_node_id'];   
      $role = $form_state['values']['role'];

      // Create a new organisation node
      $node = new stdClass();
      $node->type = NODE_TYPE_ORGANISATION;
      $node->language = LANGUAGE_NONE;
      node_object_prepare($node);
      $node->title = $form_state['values'][NODE_TYPE_ORGANISATION];
      node_save($node);

      $organisation_node_id = $node->nid;
      $role_details = film_links_get_role_details(NULL,NODE_TYPE_ORGANISATION,$role);
      if (empty($role_details['rid'])) {
        $rid = film_links_role_save($role,NODE_TYPE_ORGANISATION);
      } else {
        $rid = $role_details['rid'];
      }
      _film_general_save_role($organisation_node_id,$node_id,$rid,NULL);      
    }    
  }
}


function _film_general_film_autocomplete($string) {
  $matches = array();

  // Some fantasy DB table which holds cities
  $query = db_select('node', 'n');
 
  // Select rows that match the string

  $query->fields('n', array('title','nid'));
  $query->fields('y', array('field_year_value'));
  $query->leftJoin('field_data_field_year','y','y.entity_id=n.nid');
  $query->condition('n.type',NODE_TYPE_FILM,'=');
  $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
  $query->range(0, 10);
  $return = $query->execute();
 
  // add matches to $matches  
  foreach ($return as $row) {
    $matches[$row->title. ' ('.$row->field_year_value.')['.$row->nid.']'] = check_plain($row->title). ' <b>(' . $row->field_year_value . ')</b>';
  }
 
  // return for JS
  drupal_json_output($matches);
}


function _film_general_person_autocomplete($string) {
  $matches = array();
 
  // Some fantasy DB table which holds cities
  $query = db_select('node', 'n');
 
  // Select rows that match the string

  $query->fields('n', array('title','nid'));
  $query->condition('n.type',NODE_TYPE_PEOPLE,'=');
  $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
  $query->range(0, 10);
  $return = $query->execute();
 
  // add matches to $matches  
  foreach ($return as $row) {
    $matches[$row->title. ' ['.$row->nid.']'] = check_plain($row->title). ' [' . $row->nid . ']';
  }
 
  // return for JS
  drupal_json_output($matches);
}


function _film_general_organisation_autocomplete($string) {
  $matches = array();

  // Some fantasy DB table which holds cities
  $query = db_select('node', 'n');
 
  // Select rows that match the string

  $query->fields('n', array('title','nid'));
  $query->condition('n.type',NODE_TYPE_ORGANISATION,'=');
  $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
  $query->range(0, 10);
  $return = $query->execute();
 
  // add matches to $matches  
  foreach ($return as $row) {
    $matches[$row->title. ' ['.$row->nid.']'] = check_plain($row->title). ' [' . $row->nid . ']';
  }
 
  // return for JS
  drupal_json_output($matches);
}


function _film_general_organisation_role_autocomplete($string) {
  $matches = array();

  // Some fantasy DB table which holds cities
  $query = db_select('taxonomy_term_data', 'n');
 
  // Select rows that match the string
    

 //28
  $vid = 28; //isset($conf['film_general_org_role_vid']) ? $conf['film_general_org_role_vid'] : 28;//variable_get('film_general_org_role_vid');
  $query->fields('n', array('name','tid'));
  $query->condition('n.vid',$vid,'='); // ** SB ** THis will need to be changed to the correct VID number
  $query->condition('n.name', '%' . db_like($string) . '%', 'LIKE');
  $query->range(0, 10);
  $return = $query->execute();
 
  // add matches to $matches  
  foreach ($return as $row) {
    $matches[$row->name] = check_plain($row->name);
  }
 
  // return for JS
  drupal_json_output($matches);
}

/******************************************************************************
 *  Set up the blocks for the system
 *
/*****************************************************************************/

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function film_general_block_info() {
  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
  $blocks['film_general_film_person_add'] = array(
    'info' => t('Add people to a film'),
  );  
  
  $blocks['film_general_film_search'] = array(
    'info' => t('Search films'),
  );
   
  $blocks['film_general_people_search'] = array(
    'info' => t('Search people'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function film_general_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  
  switch ($delta) {
    case 'film_general_film_search':
      $block['subject'] = t('Search films');
      $block['content'] = _film_general_block_contents($delta);
      break;
    
    case 'film_general_film_person_add':
      $block['subject'] = t('Add people to a film');
      $block['content'] = _film_general_block_contents($delta);
      break;  
    
    case 'film_general_people_search':
      $block['subject'] = t('Search people');
      $block['content'] = _film_general_block_contents($delta);
      break;  

  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function _film_general_block_contents($which_block) {
  switch ($which_block) {
    case 'film_general_film_search':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
      
      $film_form = drupal_get_form('film_general_film_search_form');
          $message = 'Search form here instructions';
      $output = array(
        t('Split Instructions')  => array(
          '#markup' => t($message),
          ), 


        'form_film' => array(
          '#type' => 'item',
          '#markup' => drupal_render($film_form),
        ),       

      );      
      return $output;
      break;
    
    case 'film_general_film_person_add':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
      $output = array();
      //DPM($_SESSION['film_node_id']);
      if (!empty($_GET['nid'])) {
        $node_id = $_GET['nid'];
        $_SESSION['film_node_id'] = $node_id;
      } elseif (!empty($_SESSION['film_node_id'])) {
        $node_id = $_SESSION['film_node_id'];
      }
      return film_general_manage_people_on_film($node_id);
      break; 
 
    case 'film_general_people_search':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
      
      $film_form = drupal_get_form('film_general_person_search_form');
          $message = 'Search form here instructions';
      $output['Split Instructions']  = array(
          '#markup' => t($message),
          ); 

      $output['form_film'] = array(
          '#type' => 'item',
          '#markup' => drupal_render($film_form),
        );       
     
      return $output;
      break;
    
    default:
      dpm('tt');
      return;
  }
}
  
// The $type is the content type we are adding to the node
// So this chould be person or film or orgsanisaton. It shouldn't 
// be the same type as the node
function film_general_manage_add($node, $type) {
  $message = '';
  $form = array();
  $film_links_table = array();
  
  if (!empty($node)) {
    // Display hte header informsation first
    switch ($type) {
      case NODE_TYPE_FILM:
        $message = 'Film contributions for '. l($node->title,'node/' . $node->nid) . '.';
        $form = drupal_get_form('film_general_add_form_film',$node);
        // Might need to alter this function
        $film_links_table = drupal_get_form('film_general_list_links',$node,$type); 
        break;
      case NODE_TYPE_PEOPLE:
        $message = 'Edit production credits for '. l($node->title,'node/' . $node->nid) . '.';
        $form = drupal_get_form('film_general_add_form_people',$node);
            // Now show the details of people already added to the film
        $film_links_table = drupal_get_form('film_general_list_links',$node,$type);        

        break;
      case NODE_TYPE_ORGANISATION:
        $message = 'Adding an organisation to '. l($node->title,'node/' . $node->nid) . '.';
        $form = drupal_get_form('film_general_add_form_organisation',$node);
        $film_links_table = drupal_get_form('film_general_list_links',$node,$type);        
        break;
    }
 
    $output[NODE_TYPE_FILM] =  array(
          '#markup' => t($message),
          '#prefix' => '<h2>',
          '#suffix' => '</h2>', 
    );
 
    if (!empty($form)) {
      $output['form_film'] = array(
          '#type' => 'item',
          '#markup' => drupal_render($form),
      );       
    }
    
    if (!empty($film_links_table)) {
      $output['film_links_table'] = array (
          '#type' => 'item',
          '#markup' => drupal_render($film_links_table),            
      );    
    }
    
    drupal_add_js(drupal_get_path('module', 'film_general') . '/js/general.js', 'file');

  } else {

    $message = 'Sorry but there was no film supplied to add people to.';
    $output[] = array(
      t('Split Instructions')  => array(
        '#markup' => t($message),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
        ),   

    );          
  }
  return $output;    
}
  
function film_general_manage_people_on_film($node_id) {
  if (!empty($node_id)) {
    $node = node_load($node_id);
    if (!empty($node)) {
      // Now we get the information about the file we just saved.
      // the minimum that should be there is the title and possibly the year
      $message = 'Adding people to '. $node->title.'.';
      $output[] = array(
        NODE_TYPE_FILM => array(
            '#markup' => t($message),
            '#prefix' => '<h2>',
            '#suffix' => '</h2>',
        )  
      );
    }
    $person_form = drupal_get_form('film_general_add_form_people',$node);
    $message = 'Please enter the person you wish to add to this film.';
    $message .= 'If the person is not already in our system we will ask you to fill in their details when you have completed this form.';
    $output[] = array(
      t('Split Instructions')  => array(
        '#markup' => t($message),
        ), 


      'form_film' => array(
        '#type' => 'item',
        '#markup' => drupal_render($person_form),
      ),       

    );    
    
  } else {

    $message = 'Sorry but there was no film supplied to add people to.';
    $output[] = array(
      t('Split Instructions')  => array(
        '#markup' => t($message),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
        ),   

    );          
  }
  return $output;    
}

//function film_general_manage_people_for_films($node_id) {
//  if (!empty($node_id)) {
//    $node = node_load($node_id);
//    if (!empty($node)) {
//      // Now we get the information about the file we just saved.
//      // the minimum that should be there is the title and possibly the year
////      $message = 'Edit Crew and Cast.';
//      $message = 'Edit production credits for ' . $node->title;
//      $output[] = array(
//        NODE_TYPE_FILM => array(
//            '#markup' => t($message),
//            '#prefix' => '<h2>',
//            '#suffix' => '</h2>',
//        )  
//      );
//    }
//    $person_form = drupal_get_form('film_general_add_person_to_film_form',$node_id);
//    $message = 'Please enter the person you wish to add to this film.';
//    $message .= 'If the person is not already in our system we will ask you to fill in their details when you have completed this form.';
//    $output[] = array(
//      t('Split Instructions')  => array(
//        '#markup' => t($message),
//        ), 
//
//
//      'form_film' => array(
//        '#type' => 'item',
//        '#markup' => drupal_render($person_form),
//      ),       
//
//    );       
//
//    // Now show the details of people already added to the film
//
//    $film_links_table = drupal_get_form('film_general_film_people_form',$node);        
//
//    $output['film_links_table'] = array (
//        '#type' => 'item',
//        '#markup' => drupal_render($film_links_table),            
//    );
//  } else {
//
//    $message = 'Sorry but there was no film supplied to add people to.';
//    $output[] = array(
//      t('Split Instructions')  => array(
//        '#markup' => t($message),
//          '#prefix' => '<div>',
//          '#suffix' => '</div>',
//        ),   
//
//    );          
//  }
//  return $output;    
//}

// THis will allow the user to search for films and add them to the person.
// Node-id is the ID of the person we are currently looking at.
//function film_general_manage_films_for_people($node_id) {
//  if (!empty($node_id)) {
//    $node = node_load($node_id);
//    if (!empty($node)) {
//      // Now we get the information about the file we just saved.
//      // the minimum that should be there is the title and possibly the year
//      $message = 'Film contributions for <em>'. $node->title.'</em>.';
//      $output[] = array(
//        NODE_TYPE_FILM => array(
//            '#markup' => t($message),
//            '#prefix' => '<h2>',
//            '#suffix' => '</h2>',
//        )  
//      );
//    }
//    $person_form = drupal_get_form('film_general_add_film_to_person_form',$node_id);
//    $message = 'Please enter the film you wish to add for this person. ';
//    $message .= 'If the film is not already in our system we will ask you to fill in the details when you have completed this form.';
//    $output[] = array(
//      t('Split Instructions')  => array(
//        '#markup' => t($message),
//        ), 
//
//
//      'form_film' => array(
//        '#type' => 'item',
//        '#markup' => drupal_render($person_form),
//      ),       
//
//    );       
//
//    // Now show the details of people already added to the film
//
//    $person_form = drupal_get_form('film_general_people_film_form',$node);        
//
//    $output[NODE_TYPE_PEOPLE] = array (
//        '#type' => 'item',
//        '#markup' => drupal_render($person_form),            
//    );
//   
//    drupal_add_js(drupal_get_path('module', 'film_general') . '/js/general.js', 'file');
//
//  } else {
//
//    $message = 'Sorry but there was no film supplied to add people to.';
//    $output[] = array(
//      t('Split Instructions')  => array(
//        '#markup' => t($message),
//          '#prefix' => '<div>',
//          '#suffix' => '</div>',
//        ),   
//
//    );          
//  }
//  
//  return $output;    
//}


function film_general_person_node_validate( $form, &$form_state) {
  $name = '';

  $valid_year = FALSE;
  $year = 0;
  // Validate the date of birth year
  if (!empty($form_state['values']['field_dob_year'][LANGUAGE_NONE][0]['name'])) {
    $year = $form_state['values']['field_dob_year'][LANGUAGE_NONE][0]['name'];

    // First of all parse the year to make sure it is in the right format
    $matches = array();
    preg_match('/^[0-9]{4}$/m',$year,$matches);
    if (!empty($matches)) {
      // Now check that the year is within the valid range
      $year_now = date('Y');

      if ($year > $year_now) {
        form_set_error('[field_dob_year]', t('The year for date of birth must be before ' . $year_now));
      } else {
        $valid_year = TRUE;
      }  
    } else {
      form_set_error('[field_dob_year]', t('The year must be have four digits.'));
    }
  }
  
  // Validate the day and month of birth year
  if (!empty($form_state['values']['field_day_and_month'][LANGUAGE_NONE][0]['name'])) {
    $day_month = $form_state['values']['field_day_and_month'][LANGUAGE_NONE][0]['name'];

    // First of all parse the year to make sure it is in the right format
    $matches = array();
    preg_match('/^[0-9]{1,2}\s(january|february|march|april|may|june|july|august|september|october|november|december)$/',strtolower($day_month),$matches);

    if ($matches) {
      $date_error = FALSE;
      $parts = explode(' ',$day_month);
      $day = $parts[0];
      $month = $parts[1];
      
      // Need to check that the day value is valid for the month
      switch (strtolower($month)) {
        case 'february':
          $max_day = 28;
          if ($valid_year && is_leap_year($year)) {
            $max_day = 29;
          }
          if ($day > $max_day || $day <= 0) {
            $date_error = TRUE;
            form_set_error('[field_day_and_month]', t('The day must be between 1 and '.$max_day.' inclusive.'));
          }          
          break;
        case 'april':
        case 'june':
        case 'september':
        case 'november':
          if ($day > 30 || $day <= 0) {
            $date_error = TRUE;
            form_set_error('[field_day_and_month]', t('The day must be between 1 and 30 inclusive.'));
          }          
          break;
        case 'january':          
        case 'march':
        case 'may':          
        case 'july':          
        case 'august':
        case 'october':
        case 'december':
          if ($day > 31 || $day <= 0) {
            form_set_error('[field_day_and_month]', t('The day must be between 1 and 31 inclusive.'));
            $date_error = TRUE;
          }
          break;       
      }
      
      // Now format the date correctly if it is correct
      if ( $date_error == FALSE) {
        $day = sprintf('%02d',$day);
        $month = ucfirst(strtolower($month));

        $form_state['values']['field_day_and_month'][LANGUAGE_NONE][0]['name'] = $day . ' ' . $month;
        $form_state['input']['field_day_and_month'][LANGUAGE_NONE] = $day . ' ' . $month;
        $form_state['complete form']['field_day_and_month'][LANGUAGE_NONE]['#value'] = $day . ' ' . $month;
      }
    } else {
      form_set_error('[field_day_and_month]', t('The date of birth needs to be a the day followed by the month i.e. 03 February.'));
    }
  }  
  
  if (!empty($form_state['input']['field_forename'][LANGUAGE_NONE][0]['value']))
    $name = $form_state['input']['field_forename'][LANGUAGE_NONE][0]['value'];
  
  if (!empty($form_state['input']['field_surname'][LANGUAGE_NONE][0]['value'])) {
    if (!empty($name)) $name .= ' ';
    $name .= $form_state['input']['field_surname'][LANGUAGE_NONE][0]['value'];
  }

  $form_state['complete form']['title']['#default_value'] = t($name);
  $form_state['complete form']['title']['#value'] = t($name);
  $form_state['values']['title'] = t($name);
//  $form_state['input']['title'] = $name;

  $film_id = $form_state['input']['film_id'];
  $role_id = $form_state['input']['role_id'];
  $sub_role_id = $form_state['input']['sub_role_id'];
  
  $form_state['complete form']['role_id']['#value'] = $role_id;
  $form_state['complete form']['sub_role_id']['#value'] = $sub_role_id;
  $form_state['complete form']['film_id']['#value'] = $film_id;
  
//  $form_state['redirect'] = 'node/'.$film_id.'/person_add?film_id='.$film_id.'&type='.$person_type.'&name='.$name;

}


function is_leap_year($year)
{
	return ((($year % 4) == 0) && ((($year % 100) != 0) || (($year %400) == 0)));
}
function film_general_review_node_validate( $form, &$form_state) {

}
function film_general_article_node_validate( $form, &$form_state) {

}
function film_general_image_node_validate( $form, &$form_state) {
  //dpm($form_state);
}

function film_general_person_node_submit($form, &$form_state) {

  //$form_state['rebuild'] = TRUE;
  
  if (!empty($form_state['values']['film_id'])) {
    $film_node_id = $form_state['values']['film_id'];
    $person_node_id = $form_state['values']['nid'];  
    $role_id = $form_state['values']['role_id'];
    $sub_role_id = $form_state['values']['sub_role_id'];      
    film_general_add_person_to_film($film_node_id,$person_node_id,$role_id,$sub_role_id);
    $form_state['redirect'] = 'node/'.$film_node_id.'/people';
  }
}

function film_general_review_node_submit($form, &$form_state) {
  if (empty($form['nid']['#value']) && !empty($form_state['values']['field_link'][LANGUAGE_NONE][0]['target_id'])) {
    $film_node_id = $form_state['values']['field_link'][LANGUAGE_NONE][0]['target_id'];
    $form_state['redirect'] = 'node/'.$film_node_id.'/reviews';
  }  
}

function film_general_image_node_submit($form, &$form_state) { 
  if (empty($form['nid']['#value']) && !empty($form_state['values']['field_link'][LANGUAGE_NONE][0]['target_id'])) {
    $film_node_id = $form_state['values']['field_link'][LANGUAGE_NONE][0]['target_id'];
    $form_state['redirect'] = 'node/'.$film_node_id.'/pictures';
  }
}

function film_general_article_node_submit($form, &$form_state) {
  if (empty($form['nid']['#value']) && !empty($form_state['values']['field_link'][LANGUAGE_NONE][0]['target_id'])) {
    $film_node_id = $form_state['values']['field_link'][LANGUAGE_NONE][0]['target_id'];
    $form_state['redirect'] = 'node/'.$film_node_id.'/articles';
  }  
}


function film_general_add_person_to_film($film_node_id,$person_node_id,$role_id,$character = NULL) {
  
  film_links_add($film_node_id,$person_node_id,$role_id,$character);

}

//
//function film_general_node_view($node, $view_mode, $langcode) {
//  
//  $film_form = drupal_get_form('film_general_film_search_form');
//  $film_form['#weight'] = 1;
//  
//  $node->content['data_collection_form'] = $film_form;
//  dpm($node);
//}
//
//function film_general_node_view_alter(&$build) {
//  dpm($build);
// // $build['#view_mode'] = 'teaser';
////  $film_form = drupal_get_form('film_general_film_search_form');
////  $build['test_form66'] = film_general_film_search_form();
//}
//
// function film_general_ds_fields_info_alter(&$fields, $entity_type) {
//   dpm($fields);
//   if (isset($fields['title'])) {
//    $fields['title']['title'] = t('My title');
//    }
// }
// 
//   function film_general_ds_pre_render_alter(&$layout_render_array, $context)  {
//     dpm('jjj');
//     dpm($layout_render_array);
//   
//  }

function _film_general_save_role($node_id,$node_id2,$role_id,
    $character) {
    
  if ($role_id <> FALSE) {
      // The save worked. Now we can save the sub role
      film_general_add_person_to_film($node_id,$node_id2,$role_id,$character);
    } else {
      // Couldn't save the new role
      $save_role = FALSE;
    }
}

function _film_general_convert_role($role,$type = NULL) {

  // The $type will tell us which taxonomy term we are going to use.

  $converted_roles = array();
  if (!empty($role)) {
    foreach ($role as $key => $role_name) {
      $role_details = film_links_get_role_details( NULL, $type, $role_name );
      if (!empty($role_details)) {
        $converted_roles[] = $role_details['rid'];
      }
    }
  }
    
  return $converted_roles;
}


/**
 * Implements hook_permission().
 *
 * We want to let site administrators figure out who should
 * be able to view, edit, and administer our field.
 *
 * Field permission operations can only be view or edit, in the
 * context of one's own content or that of others. Constrast
 * with content types where we also have to worry about who can
 * create or delete content.
 */
function film_general_permission() {
  // Note: This would be very easy to generate programatically,
  // but it's all typed out here for clarity.
  // The key text is the machine name of the permission.
  $perms['add people to film'] = array('title' => t('Add people to films'));
  $perms['add films to people'] = array('title' => t('Add films to people'));

  return $perms;
}

function film_general_show_add_people_link($nid) {
  $link = '';
  if (user_access('add people to film')) {
    $link = l(t('Edit'),'node/' . $nid . '/people');
  }
  
  return $link;
}

function film_general_show_add_film_link($nid) {
  $link = '';
  if (user_access('add films to people')) {
    $link = l(t('Edit'),'node/' . $nid . '/films');
  }
  
  return $link;
}

function film_general_show_add_organisation_link($nid) {
  $link = '';
  if (user_access('add films to people')) {
    $link = l(t('Edit'),'node/' . $nid . '/organisations');
  }
  
  return $link;
}


function convert_film_details() {

  $query = db_select('film_link', 'fl');
  $query->innerJoin('film_link_role','flr','flr.rid = fl.rid');
  $query->fields('fl',array('fid','pid','film_character'));
  $query->fields('flr', array('name'));
  $result = $query->execute();
  
  foreach($result as $row) {
    // Check to see if hte role has already been added to the taxonomy term
    // If not then add it and get the ID
    $name = trim($row->name);
    $tid = _taxonomy_exist(variable_get('film_general_role_vid'),$name);
    if ( $tid === FALSE) {
      // Need to add it to the taxonomy vocab.
  
      $term = new stdClass();
      $term->name = $name;
      $term->vid = variable_get('film_general_role_vid');
      taxonomy_term_save($term);
      $tid =  $term->tid; 
    }

    film_links_add($row->fid,$row->pid,$tid,$row->film_character);
  }
}

function _taxonomy_exist($vid, $term) {
  $query = db_select('taxonomy_term_data', 'r');
  $query->condition('r.name', $term, '=');
  $query->condition('r.vid', $vid, '=');
  $query->fields('r', array('name','tid'));
  $query->range(0, 3);
  $result = $query->execute();

  $found = FALSE;
  foreach ($result as $row) {
    $found = $row->tid;
    dpm($row->name);
  }
  
  return $found;
}
